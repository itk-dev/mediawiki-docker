server {
    listen ${NGINX_PORT};
    server_name localhost;

    root ${NGINX_WEB_ROOT};
    index index.php index.html index.htm;

    client_max_body_size ${NGINX_MAX_BODY_SIZE};

    # This also needs to be set in the single server tag and not only in http.
    set_real_ip_from 172.16.0.0/16;
    real_ip_recursive on;
    real_ip_header X-Forwarded-For;

    location ~* ^/mediawiki/(.*)$ {
        rewrite ^/mediawiki/(.*)$ /$1 last;
    }

    location ~ ^/(index|load|api|thumb|opensearch_desc|rest|img_auth)\.php$ {
        fastcgi_buffers 16 32k;
        fastcgi_buffer_size 64k;
        fastcgi_busy_buffers_size 64k;

        fastcgi_pass ${NGINX_FPM_SERVICE};
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        include fastcgi_params;
    }

    location ~ \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        try_files $uri $uri/ /index.php;
    }

    # Images
    location /images {
        # Separate location for images/ so .php execution won't apply
        add_header X-Content-Type-Options "nosniff";
    }

    location /images/deleted {
        # Deny access to deleted images folder
        deny all;
    }

    # MediaWiki assets (usually images)
    location ~ ^/resources/(assets|lib|src) {
        try_files $uri 404;
        add_header Cache-Control "public";
        expires 7d;
    }

    # Assets, scripts and styles from skins and extensions
    location ~ ^/(skins|extensions)/.+\.(css|js|gif|jpg|jpeg|png|svg|wasm)$ {
        try_files $uri 404;
        add_header Cache-Control "public";
        expires 7d;
    }

    # License and credits files
    location ~ ^/(COPYING|CREDITS) {
        default_type text/plain;
    }

    # Handling for Mediawiki REST API, see [[mw:API:REST_API]]
    location /rest.php/ {
        try_files $uri $uri/ /rest.php?$query_string;
    }

    ## Uncomment the following code for handling image authentication
    ## Also add "deny all;" in the location for /w/images above
    #location /img_auth.php/ {
    #    try_files $uri $uri/ /w/img_auth.php?$query_string;
    #}

    # Handling for the article path (pretty URLs)
    location /wiki/ {
        rewrite ^/wiki/(?<pagename>.*)$ /index.php last;
    }

    location / {
        try_files $uri $uri/ =404;
    }

    # serve static files directly
    location ~* \.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|doc|xls|exe|pdf|ppt|txt|tar|mid|midi|wav|bmp|rtf|mp3|flv|mpeg|avi)$ {
        expires max;
        log_not_found off;
    }

    # Send log message to files symlinked to stdout/stderr.
    error_log /dev/stderr;
    access_log /dev/stdout main;
}
